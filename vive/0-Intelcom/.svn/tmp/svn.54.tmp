/*
* Copyright (c) 2014 IMOCOM. All Rights Reserved.
*
* This software is the confidential and proprietary information of IMOCOM.
* ("Confidential Information").
* It may not be copied or reproduced in any manner without the express
* written permission of IMOCOM.
*/

package com.imocom.intelcom.services.ejb3;

import com.imocom.intelcom.persistence.entities.Usuario;
import com.imocom.intelcom.persistence.util.PersistenceException;
import com.imocom.intelcom.services.AbstractService;
import com.imocom.intelcom.services.interfaces.IUsuarioServiceLocal;
import com.imocom.intelcom.services.util.ServiceException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ejb.Stateless;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * <strong>Aplicaci√≥n</strong>     : IMOCOM Sistema de Inteligancia comercial.
 * <br/>
 * <br/>
 * <strong>Date</strong>           : Oct 28, 2014
 * <br/><br/>
 * <strong>Target</strong>         :
 *
 * @author Carlos Guzman (cguzman) - PointMind S.A.S. - carlos.guzman@pointmind.com
 *
 */
@Stateless
public class UsuarioServiceBean extends AbstractService<Long, Usuario> implements IUsuarioServiceLocal {
    
    private static final Logger logger = Logger.getLogger(UsuarioServiceBean.class);
    
    public UsuarioServiceBean() {
        super(Usuario.class);
    }
    
    public Usuario findByIdUsuario (Long idUsuario) throws ServiceException{
        try{
            return findById(idUsuario);
        } catch (PersistenceException ex) {
            logger.error(ex.getMessage());
            throw new ServiceException(ex, Level.ERROR);
        }
    }
    
    public Usuario findByUsuario (String nombre) throws ServiceException{
        return em.createNamedQuery("Usuario.findByUsuario", entityClass)
                .setParameter("usuario", nombre)
                .getSingleResult();
    }

    public void updateUsuario(Usuario usuario) throws ServiceException{
        try{
            update(usuario);
            //em.refresh(usuario);
        } catch (PersistenceException ex) {
            logger.error(ex.getMessage());
            throw new ServiceException(ex, Level.ERROR);
        }
        
    }
    
    /**
     * Metodo que consulta un usuario por nombre usuario
     * @param nombre
     * @return
     * @throws ServiceException 
     */
    public List<Usuario> findByNombreParcialUsuario(String nombre) throws ServiceException{
        if(nombre!=null){
            return em.createNamedQuery("Usuario.findByNombreParcial", entityClass)
                    .setParameter("nombre", "%" + nombre.toUpperCase() + "%")
                    .getResultList();
        }
        return null;
        
    }
    
    
    /**
     *
     * @param passwd
     * @return
     * @throws ServiceException
     */
    public String getEncriptedPasswd(String passwd) throws ServiceException {
        try {
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("password", passwd);
            
            List results = (List) executeStoredFunction("Usuario.encryptFunction", params);
            
            if (results != null && !results.isEmpty()) {
                return (String) results.get(0);
            } else {
                logger.warn("Se ha presentado un error al encriptar la clave del usuario");
                throw new ServiceException("Se ha presentado un error al encriptar la clave del usuario", Level.WARN);
            }
        } catch (PersistenceException ex) {
            logger.error(ex.getMessage());
            throw new ServiceException(ex, Level.ERROR);
        }
    }  
}
