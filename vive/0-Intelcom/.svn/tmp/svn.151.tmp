/*
 * Copyright (c) 2014 IMOCOM. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of IMOCOM.
 * ("Confidential Information").
 * It may not be copied or reproduced in any manner without the express
 * written permission of IMOCOM.
 */
package com.imocom.intelcom.view.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import com.imocom.intelcom.util.utility.Constants;
import java.io.InputStream;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Carlos Guzman
 */
public class CreateDocx {

    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(CreateDocx.class);
    private HashMap<String, String> codReplace;
    private String nameNewDocument;

    public CreateDocx(HashMap<String, String> codReplace, String nameNewDocument) {
        this.codReplace = codReplace;
        this.nameNewDocument = nameNewDocument;
    }

    private void _updateDoc(XWPFDocument doc, String key, String value) throws FileNotFoundException, IOException {

         for (XWPFParagraph p : doc.getParagraphs()) {

            List<XWPFRun> runs = p.getRuns();
            if (runs != null) {
                for (XWPFRun r : runs) {
                    String text = r.getText(0);
                   
                      
                    if (text != null && text.contains(key)) {
                       
                        text = text.replace(key, value);
                        r.setText(text, 0);
                      
                        //r.s
                    }
                }
            }
        }
        List<XWPFParagraph> xwpfParagraphs = doc.getParagraphs();

        List<XWPFTable> tables = doc.getTables();
        for (XWPFTable xwpfTable : tables) {
            List<XWPFTableRow> tableRows = xwpfTable.getRows();
            for (XWPFTableRow xwpfTableRow : tableRows) {
                List<XWPFTableCell> tableCells = xwpfTableRow
                        .getTableCells();
                for (XWPFTableCell xwpfTableCell : tableCells) {
                    xwpfParagraphs = xwpfTableCell.getParagraphs();
                    for (XWPFParagraph p : xwpfParagraphs) {

                        List<XWPFRun> runs = p.getRuns();
                        if (runs != null) {
                            for (XWPFRun r : runs) {
                                String text = r.getText(0);
                                
                                if (text != null && text.contains(key)) {
                                    text = text.replace(key, value);
                                    r.setText(text, 0);
                                    //r.s
                                }
                            }
                        }
                    }

                }
            }
        }
        doc.write(new FileOutputStream(nameNewDocument));
    }

    public InputStream replace() {
        try {
            String filepath = Constants.TEMPLATE_COTIZACIONES;
            XWPFDocument doc = new XWPFDocument(new FileInputStream(filepath));
            for (Map.Entry e : codReplace.entrySet()) {
                try {
                    logger.info(e.getKey() + " " + e.getValue());
                    _updateDoc(doc, e.getKey().toString(), e.getValue().toString());

                } catch (IOException ex) {
                    logger.error("Error Creando Cotizacion", ex);
                }
            }
            InputStream is = new FileInputStream(nameNewDocument);
            logger.info("Inputsream: " + is.toString());
            return is;
        } catch (IOException ex) {
            logger.error("Error Creando Cotizacion", ex);
        }
        return null;
    }

}
