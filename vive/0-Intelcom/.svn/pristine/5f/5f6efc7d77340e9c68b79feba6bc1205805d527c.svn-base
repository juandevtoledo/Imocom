/*
 * Copyright (c) 2014 IMOCOM. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of IMOCOM.
 * ("Confidential Information").
 * It may not be copied or reproduced in any manner without the express
 * written permission of IMOCOM.
 */
package com.imocom.intelcom.view.beans;

import com.imocom.intelcom.persistence.entities.Proyecto;
import com.imocom.intelcom.persistence.entities.ServiciosEbs;
import com.imocom.intelcom.persistence.entities.Tipo;
import com.imocom.intelcom.ridc.RidcConnectionServiceBean;
import com.imocom.intelcom.services.interfaces.IProyectoServiceLocal;
import com.imocom.intelcom.services.interfaces.IServiciosEBSLocal;
import com.imocom.intelcom.services.interfaces.ITipoServiceLocal;
import com.imocom.intelcom.services.util.ServiceException;
import com.imocom.intelcom.util.utility.Constants;
import static com.imocom.intelcom.util.utility.Constants.CONTACTO_CLIENTE_ID_PARAM;
import static com.imocom.intelcom.util.utility.Constants.DETALLE_CLIENTE_ID_PARAM;
import static com.imocom.intelcom.util.utility.Constants.TIPO_VALOR_PAIS_COLOMBIA;
import static com.imocom.intelcom.util.utility.Constants.PAGE_CLIENTES_CONTACTO_ACTUALIZAR_KEY;
import static com.imocom.intelcom.util.utility.Constants.PAGE_CLIENTES_DETALLE_CONSULTADO_KEY;
import static com.imocom.intelcom.util.utility.Constants.TIPO_CIUDAD;
import static com.imocom.intelcom.util.utility.Constants.TIPO_DEPARTAMENTO;
import static com.imocom.intelcom.util.utility.Constants.TIPO_PAIS;
import static com.imocom.intelcom.util.utility.Constants.WS_BPM_CLIENTES_ACTUALIZACION;
import static com.imocom.intelcom.util.utility.Constants.WS_PROCESS_ENTITY_CLIENTE_ACTUALIZACION;
import com.imocom.intelcom.util.utility.Utils;
import com.imocom.intelcom.view.AbstractFacesBean;
import static com.imocom.intelcom.view.util.JSFUtils.getViewRedirect;
import com.imocom.intelcom.util.dtos.ClaveValorDTO;
import com.imocom.intelcom.view.vo.ContactoCliente;
import com.imocom.intelcom.view.vo.DetalleCliente;
import com.imocom.intelcom.view.vo.DocumentosClienteDTO;
import com.imocom.intelcom.ws.ebs.vo.entities.ContactoVO;
import com.imocom.intelcom.ws.ebs.vo.entities.ResultadoVisitaVO;
import com.imocom.intelcom.ws.interfaces.jaxws.MiddlewareServiceRequestVO;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import org.apache.log4j.Logger;
import org.primefaces.model.UploadedFile;

/**
 *
 * @author rc
 */
@ManagedBean
@ViewScoped

public class ClientesActualizarFacesBean extends AbstractFacesBean implements Serializable {

    private static final Logger logger = Logger.getLogger(ClientesActualizarFacesBean.class);
    private static final long serialVersionUID = 1L;

    private DetalleCliente detalleCliente;
    private ContactoCliente contactoSeleccionado;

    private MiddlewareServiceRequestVO request;
    private int numeroParametrosWS = 0;

    private String idPais;
    private String idDepartamento;
    private String idCiudad;

    private boolean esPaisColombia;

    private List<Tipo> listaPaises;

    public boolean isEsPaisColombia() {
        return esPaisColombia;
    }

    public void setEsPaisColombia(boolean esPaisColombia) {
        this.esPaisColombia = esPaisColombia;
    }
    
    private String consultarDocumentoClienteTipo;
    private String consultarDocumentoClienteTitulo;
    private String consultarDocumentoClienteNombre;
    private List<ClaveValorDTO> listaClaveValorTipoDTOConsulta;
    private List<ClaveValorDTO> listaClaveValorTipoDTOCrear;
    private List<ClaveValorDTO> listaClaveValorTituloDTO;
    private List<DocumentosClienteDTO> listaDocumentosClienteDTO;    
    private DocumentosClienteDTO documentosClienteDTOSeleccionado;
    private UploadedFile fileDocumentoCotizacionAutomatica;
    private String consultarDocumentoClienteDescripcion;
    private Proyecto proyectoSeleccionado;
    private Proyecto proyectoSeleccionadoConsulta;
    private List<ClaveValorDTO> listaClaveValorProyectoPlanInversionDTO;
    private List<Proyecto> listaProyectosCliente;
    
    private List<ClaveValorDTO> listaClaveValorMonedaDTO;
    
    private List<Tipo> listaCiudad;
    private List<Tipo> listaDepto;
    
    @EJB
    private IServiciosEBSLocal iServiciosESB;

    @EJB
    private ITipoServiceLocal iTipoService;
    
    @EJB
    private IProyectoServiceLocal iProyectoServiceLocal;

    @Override
    protected void build() {
        try {
            DetalleCliente detalleClienteConsultado = (DetalleCliente) getSessionMap().get(DETALLE_CLIENTE_ID_PARAM);
            detalleCliente = new DetalleCliente(detalleClienteConsultado);

            Tipo tipoPais = iTipoService.findByTipoNombreValor(TIPO_PAIS, detalleCliente.getPais());
            idPais = "" + tipoPais.getIdTipo();
            Tipo tipoDepartamento = iTipoService.findByTipoNombreValorTipopadre(TIPO_DEPARTAMENTO, detalleCliente.getDepartamento(), tipoPais.getIdTipo());
            idDepartamento = "" + tipoDepartamento.getIdTipo();
            Tipo tipoCiudad = iTipoService.findByTipoNombreValorTipopadre(TIPO_CIUDAD, detalleCliente.getCiudad(), tipoDepartamento.getIdTipo());
            idCiudad = "" + tipoCiudad.getIdTipo();

            listaPaises = iTipoService.findByTipoNombre(TIPO_PAIS);
            listaDepto = iTipoService.findByTipoNombrePadre(tipoPais.getIdTipo());
            listaCiudad = iTipoService.findByTipoNombrePadre(tipoDepartamento.getIdTipo());

            esPaisColombia = TIPO_VALOR_PAIS_COLOMBIA.equals(tipoPais.getTipoValor());
            
            List<Tipo> listaTipoDocsCliente = iTipoService.findByTipoNombre( Constants.TIPO_DOCUMENTO_CLIENTE );
            
            listaClaveValorTipoDTOConsulta = new ArrayList<ClaveValorDTO>();
            listaClaveValorTipoDTOCrear = new ArrayList<ClaveValorDTO>();
            for (Tipo tipo : listaTipoDocsCliente) {
                listaClaveValorTipoDTOConsulta.add( new ClaveValorDTO( tipo.getTipoValor(), tipo.getTipoEtiqueta()));
                if( !"HABEASDATA".equals( tipo.getTipoValor() ) ){
                    listaClaveValorTipoDTOCrear.add( new ClaveValorDTO( tipo.getTipoValor(), tipo.getTipoEtiqueta()));
                }
            }
            
            listaClaveValorMonedaDTO = new ArrayList<ClaveValorDTO>();
            List<Tipo> listaTipoMonedas = iTipoService.findByTipoNombre( Constants.TIPO_MONEDA_CLIENTE_PROYECTO );
            for (Tipo tipo : listaTipoMonedas) {
                listaClaveValorMonedaDTO.add( new ClaveValorDTO( tipo.getTipoValor(), tipo.getTipoEtiqueta()));
            }
            
            listaClaveValorProyectoPlanInversionDTO = new ArrayList<ClaveValorDTO>();
            listaClaveValorProyectoPlanInversionDTO.add( new ClaveValorDTO("PROYECTO", "Proyecto"));
            listaClaveValorProyectoPlanInversionDTO.add( new ClaveValorDTO("PLAN INVERSION", "Plan Inversión"));
            
            listaClaveValorTituloDTO = new ArrayList<ClaveValorDTO>();
            for (int i = 2017; i <= 2030; i++) {                
                listaClaveValorTituloDTO.add( new ClaveValorDTO(i+"", i+""));
            }
            documentosClienteBuscarAction( null );            
            
            documentosClienteDTOSeleccionado = null;
            proyectoSeleccionado = new Proyecto();
            proyectoSeleccionadoConsulta = new Proyecto();
            
            Object obj = getSessionMap().get("OBJ_PROYECTO");
            if( obj != null ){
                proyectoSeleccionado = (Proyecto)obj;
            }
            
        } catch (ServiceException ex) {
            logger.error(ex.getMessage());
        }

    }
    
    private void limpiarDatosCargarDocumento(){
     
        fileDocumentoCotizacionAutomatica = null;
        consultarDocumentoClienteTitulo = null;
        consultarDocumentoClienteDescripcion = null;
        consultarDocumentoClienteTipo = null;
        consultarDocumentoClienteNombre = null;
        listaDocumentosClienteDTO = new ArrayList<DocumentosClienteDTO>();
        proyectoSeleccionado = new Proyecto();
        proyectoSeleccionadoConsulta = new Proyecto();
    }
    
    /**
     * Conexión al UCM para guardar documento
     */
    private RidcConnectionServiceBean iRidcConnection;
    
    

    public String verProyectoClienteAction() {
        
        try {
            
            String outcome = getViewRedirect(Constants.PAGE_CLIENTES_PROYECTO_CARGAR_KEY);
            
            getSessionMap().remove("OBJ_PROYECTO");
            getSessionMap().put("OBJ_PROYECTO", proyectoSeleccionado);
            
            redirect(navigationFaces.navigation.get(outcome));
            
        } catch (IOException ex) {
            performErrorMessages("Ha ocurrido un problema al cargar el proyecto");
            logger.error(ex.getMessage());
        }
        return null;
    }
    public String eliminarProyectoCliente() {
        
        try {
            
            iProyectoServiceLocal.remove( proyectoSeleccionado.getIdProyecto() );
            
            proyectoSeleccionado = null;
            getSessionMap().remove("OBJ_PROYECTO");
             
            documentosProyectoBuscarAction( null ); 
            
            performInfoMessages("Proyecto guardado correctamente");
            
        }catch(Exception e){
            performErrorMessages("Ha ocurrido un problema al eliminar el proyecto");
            logger.error(e.getMessage());
        }        
        return null;
    }
    
    public String crearNuevoDocumento(){
        
        try {
            
            proyectoSeleccionado = new Proyecto();
        
            String outcome = getViewRedirect(Constants.PAGE_CLIENTES_PROYECTO_CARGAR_KEY);

            getSessionMap().remove("OBJ_PROYECTO");

            redirect( navigationFaces.navigation.get(outcome) );

        } catch (Exception e) {
            
            performErrorMessages("Ha ocurrido un problema al cargar el proyecto");
            logger.error(e.getMessage());
            
        }

        return null;

    }
    public void documentosProyectoBuscarAction(ActionEvent actionEvent) {
        try {
            
            listaProyectosCliente = iProyectoServiceLocal.findListByNitCliente( 
                    detalleCliente.getNit(),
                    proyectoSeleccionado.getNombre(),
                    proyectoSeleccionado.getAnio(),
                    proyectoSeleccionado.getProyectoPlan() );
            
        }catch(Exception e){
            performErrorMessages("Ha ocurrido un problema al buscar proyectos.");
            logger.error(e.getMessage());
        }
    }
    
    public String enviarProyectoClienteAction() {

        try {
            
            //validamos
            if( proyectoSeleccionado.getObservacion() != null && proyectoSeleccionado.getObservacion().trim().length() > 300 ){
                performErrorMessages("La descripción tiene un muchos carácteres, máximo 300 carácteres.");
                return null;
            }            
            
            if( proyectoSeleccionado.getIdProyecto() == null ){
                //guardamos
                proyectoSeleccionado.setNitCliente( detalleCliente.getNit() );
                proyectoSeleccionado.setNombreCliente( detalleCliente.getNombre() );
                
                iProyectoServiceLocal.save(proyectoSeleccionado);
                
            }else{
                //editamos
                iProyectoServiceLocal.update(proyectoSeleccionado);
            }
                 
            getSessionMap().remove("OBJ_PROYECTO");
            
            limpiarDatosCargarDocumento();
            
            documentosProyectoBuscarAction( null );
            
            performInfoMessages("Proyecto cargado correctamente");
            
            return "/pages/secured/mobile/clientes/consulta-proyectos.jsf?faces-redirect=true";
            
        } catch (Exception e) {
            performErrorMessages("Ha ocurrido un problema al enviar el documento del cliente.");
            logger.error(e.getMessage(), e);
        }
        
        return null;

    }
    
    /**
     * Evento de Creación llamado desde la Pagina
     * @return 
     */
    public String enviarDocumentoClienteAction() {

        try {
            
            //validamos
            if( fileDocumentoCotizacionAutomatica == null ){
                performErrorMessages("No se ha cargado ningún documento");
                return null;
            }
            
            logger.info(" *********** Subiendo Documento cotizacion automatica *********************** ");
            
            iRidcConnection = new RidcConnectionServiceBean(userSession.getRidcUrl(), userSession.getRidcUser(), userSession.getRidcPassword());
            HashMap<String, String> mapaRespuesta = iRidcConnection.checkingDocsCotizacionAutomatica(
                    fileDocumentoCotizacionAutomatica.getInputstream(), 
                    System.currentTimeMillis()+"", 
                    fileDocumentoCotizacionAutomatica.getFileName(), 
                    fileDocumentoCotizacionAutomatica.getContentType(),                    
                    consultarDocumentoClienteNombre,
                    consultarDocumentoClienteDescripcion == null ? "" : consultarDocumentoClienteDescripcion,
                    detalleCliente.getNit(),
                    consultarDocumentoClienteTitulo,
                    consultarDocumentoClienteTipo,
                    detalleCliente.getNombre(),
                    userSession.getUsuario().getUsuario());
            
            limpiarDatosCargarDocumento();
            
            documentosClienteBuscarAction( null );
            
            performInfoMessages("Documento cargado correctamente");
            
            return "/pages/secured/mobile/clientes/consulta-documentos.jsf?faces-redirect=true";
            
        } catch (Exception e) {
            performErrorMessages("Ha ocurrido un problema al enviar el documento del cliente.");
            logger.error(e.getMessage(), e);
        }
        
        return null;

    }

    public void documentosClienteBuscarAction(ActionEvent actionEvent) {
        try {
            
            iRidcConnection = new RidcConnectionServiceBean(userSession.getRidcUrl(), userSession.getRidcUser(), userSession.getRidcPassword());
            listaDocumentosClienteDTO = iRidcConnection.searchDocsClienteCotizacionAutomatica( 
                    detalleCliente.getNit(),
                    consultarDocumentoClienteTipo,
                    consultarDocumentoClienteTitulo,
                    consultarDocumentoClienteNombre);
            
        }catch(Exception e){
            performErrorMessages("Ha ocurrido un problema al buscar documentos.");
            logger.error(e.getMessage());
        }
    }
    
    
    public void actualizarAction(ActionEvent actionEvent) {
        try {
            armarRequest();

            ResultadoVisitaVO resultadoVisitaVO = new ResultadoVisitaVO();
            resultadoVisitaVO.setNombreUsuario(userSession.getUserLogin());
            resultadoVisitaVO.setNitClienteProspecto(detalleCliente.getNit());
            resultadoVisitaVO.setNombreClienteProspecto(detalleCliente.getNombre());
            resultadoVisitaVO.setDireccionDireccionProspecto(detalleCliente.getDireccion());
            resultadoVisitaVO.setTelefonoPrincipalDireccionProspecto(detalleCliente.getTelefono());
            String paisNombre = obtenerValorTipo(idPais, listaPaises);

            resultadoVisitaVO.setIdPaisDireccionProspecto(idPais);
            resultadoVisitaVO.setNombrePaisDireccionProspecto(paisNombre);

            if (esPaisColombia) {
                resultadoVisitaVO.setIdCiudadDireccionProspecto(idCiudad);
                resultadoVisitaVO.setIdDepartamentoDireccionProspecto(idDepartamento);
                String ciudadNombre = obtenerValorTipo(idCiudad, listaCiudad);
                String departamentoNombre = obtenerValorTipo(idDepartamento, listaDepto);
                resultadoVisitaVO.setCiudadDireccionProspecto(ciudadNombre);
                resultadoVisitaVO.setNombreDepartamentoDireccionProspecto(departamentoNombre);
                //Tipo departamentoTipo = iTipoService.findByTipoId(Long.parseLong(idDepartamento));
                //Indicativo..
                Tipo indicativoCliente = iTipoService.findByTipoNombreEtiqueta("INDICATIVO",departamentoNombre);
                resultadoVisitaVO.setIndicativo(indicativoCliente.getTipoValor());
                resultadoVisitaVO.setIndicativoContacto(indicativoCliente.getTipoValor());
            } else {
                resultadoVisitaVO.setCiudadDireccionProspecto(idCiudad);
                resultadoVisitaVO.setNombreDepartamentoDireccionProspecto(idDepartamento);
            }

            //se convierte el objeto a String
            String strRequest = Utils.marshal(resultadoVisitaVO);

            //se pasan los unicos 2 parÃ¡metros
            String[] paramsService = new String[numeroParametrosWS];
            paramsService[0] = strRequest;
            paramsService[1] = WS_PROCESS_ENTITY_CLIENTE_ACTUALIZACION;
            request.setParams(paramsService);

            userSession.getClientWs().consumeService(request);
                        
            // Se redirecciona a la pagina de consulta
            String outcome = getViewRedirect(PAGE_CLIENTES_DETALLE_CONSULTADO_KEY);
            redirect(navigationFaces.navigation.get(outcome));
        } catch (Exception ex) {
            performErrorMessages("Ha ocurrido un problema al enviar la solicitud de actualización de información del cliente.");
            logger.error(ex.getMessage());
        }

    }

    public String redirectVerDocumentoCliente() {
        
        return null;
    }
    
    public String redirectActualizarContacto() {
        String outcome = getViewRedirect(PAGE_CLIENTES_CONTACTO_ACTUALIZAR_KEY);
        try {
            if (contactoSeleccionado != null) {
                contactoSeleccionado.setEditando( true );
                getSessionMap().put(CONTACTO_CLIENTE_ID_PARAM, contactoSeleccionado);
                redirect(navigationFaces.navigation.get(outcome));
            }
        } catch (IOException ex) {
            String mensaje = "Recurso no encontrado (".concat(outcome).concat(")");
            logger.error(mensaje.concat(", detalles: ").concat(ex.getLocalizedMessage()));
            performErrorMessages(mensaje);
        }
        return null;
    }
    
    public String redirectInsertartContacto() {
        String outcome = getViewRedirect(PAGE_CLIENTES_CONTACTO_ACTUALIZAR_KEY);
        try {
            ContactoCliente clienteNuevo = new ContactoCliente( new ContactoVO() );
            clienteNuevo.setEditando( false );
            getSessionMap().put(CONTACTO_CLIENTE_ID_PARAM, clienteNuevo );
            redirect(navigationFaces.navigation.get(outcome));
        } catch (IOException ex) {
            String mensaje = "Recurso no encontrado (".concat(outcome).concat(")");
            logger.error(mensaje.concat(", detalles: ").concat(ex.getLocalizedMessage()));
            performErrorMessages(mensaje);
        }
        return null;
    }

    private void armarRequest() {
        try {
            request = new MiddlewareServiceRequestVO();
            ServiciosEbs servicio = iServiciosESB.findByUniqueName(WS_BPM_CLIENTES_ACTUALIZACION);
            request.setEndpoint(servicio.getInterfazEndpoint());
            request.setMethod(servicio.getMetodo());
            request.setNamespacePort(servicio.getNamespace());
            request.setServiceName(servicio.getQnameServicio());
            request.setWsdlUrl(servicio.getUrlWsdl());
            request.setInterfaceType(servicio.getTipoInterfaz());
            //Cargamos el nÃºmero de parametros
            numeroParametrosWS = servicio.getNumeroParametros();

        } catch (ServiceException ex) {
            logger.error(ex.getMessage());
        }
    }

    public void cargarDepto(ValueChangeEvent evento) throws ServiceException {
        listaCiudad = null;
        listaDepto = iTipoService.findByTipoNombrePadre(Long.parseLong(evento.getNewValue().toString(), 10));
        esPaisColombia = evento.getNewValue().toString().equals("" + userSession.getTipoPais_Colombia().getIdTipo());
        if (!esPaisColombia) {
            idDepartamento = "";
            idCiudad = "";
        }
    }

    public void cargarCiudad(ValueChangeEvent evento) throws ServiceException {
        listaCiudad = null;
        listaCiudad = iTipoService.findByTipoNombrePadre(Long.parseLong(evento.getNewValue().toString(), 10));

    }

    public String obtenerValorTipo(String idTipoStr, List<Tipo> listaValores) {
        Long idTipo = Long.parseLong(idTipoStr, 10);

        for (Tipo item : listaValores) {
            if (item.getIdTipo().equals(idTipo)) {
                return item.getTipoValor();
            }
        }
        return null;
    }

    public DetalleCliente getDetalleCliente() {
        return detalleCliente;
    }

    public void setDetalleCliente(DetalleCliente detalleCliente) {
        this.detalleCliente = detalleCliente;
    }

    public ContactoCliente getContactoSeleccionado() {
        return contactoSeleccionado;
    }

    public void setContactoSeleccionado(ContactoCliente contactoSeleccionado) {
        this.contactoSeleccionado = contactoSeleccionado;
    }

    public String getIdPais() {
        return idPais;
    }

    public void setIdPais(String idPais) {
        this.idPais = idPais;
    }

    public String getIdDepartamento() {
        return idDepartamento;
    }

    public void setIdDepartamento(String idDepartamento) {
        this.idDepartamento = idDepartamento;
    }

    public String getIdCiudad() {
        return idCiudad;
    }

    public void setIdCiudad(String idCiudad) {
        this.idCiudad = idCiudad;
    }

    public List<Tipo> getListaPaises() {
        return listaPaises;
    }

    public void setListaPaises(List<Tipo> listaPaises) {
        this.listaPaises = listaPaises;
    }

    public List<Tipo> getListaCiudad() {
        return listaCiudad;
    }

    public void setListaCiudad(List<Tipo> listaCiudad) {
        this.listaCiudad = listaCiudad;
    }

    public List<Tipo> getListaDepto() {
        return listaDepto;
    }

    public void setListaDepto(List<Tipo> listaDepto) {
        this.listaDepto = listaDepto;
    }

    public List<ClaveValorDTO> getListaClaveValorTipoDTOConsulta() {
        return listaClaveValorTipoDTOConsulta;
    }

    public void setListaClaveValorTipoDTOConsulta(List<ClaveValorDTO> listaClaveValorTipoDTOConsulta) {
        this.listaClaveValorTipoDTOConsulta = listaClaveValorTipoDTOConsulta;
    }

    public List<ClaveValorDTO> getListaClaveValorTipoDTOCrear() {
        return listaClaveValorTipoDTOCrear;
    }

    public void setListaClaveValorTipoDTOCrear(List<ClaveValorDTO> listaClaveValorTipoDTOCrear) {
        this.listaClaveValorTipoDTOCrear = listaClaveValorTipoDTOCrear;
    }

    public List<ClaveValorDTO> getListaClaveValorTituloDTO() {
        return listaClaveValorTituloDTO;
    }

    public void setListaClaveValorTituloDTO(List<ClaveValorDTO> listaClaveValorTituloDTO) {
        this.listaClaveValorTituloDTO = listaClaveValorTituloDTO;
    }

    public String getConsultarDocumentoClienteTipo() {
        return consultarDocumentoClienteTipo;
    }

    public void setConsultarDocumentoClienteTipo(String consultarDocumentoClienteTipo) {
        this.consultarDocumentoClienteTipo = consultarDocumentoClienteTipo;
    }

    public String getConsultarDocumentoClienteTitulo() {
        return consultarDocumentoClienteTitulo;
    }

    public void setConsultarDocumentoClienteTitulo(String consultarDocumentoClienteTitulo) {
        this.consultarDocumentoClienteTitulo = consultarDocumentoClienteTitulo;
    }

    public String getConsultarDocumentoClienteNombre() {
        return consultarDocumentoClienteNombre;
    }

    public void setConsultarDocumentoClienteNombre(String consultarDocumentoClienteNombre) {
        this.consultarDocumentoClienteNombre = consultarDocumentoClienteNombre;
    }

    public List<DocumentosClienteDTO> getListaDocumentosClienteDTO() {
        return listaDocumentosClienteDTO;
    }

    public void setListaDocumentosClienteDTO(List<DocumentosClienteDTO> listaDocumentosClienteDTO) {
        this.listaDocumentosClienteDTO = listaDocumentosClienteDTO;
    }

    public DocumentosClienteDTO getDocumentosClienteDTOSeleccionado() {
        return documentosClienteDTOSeleccionado;
    }

    public void setDocumentosClienteDTOSeleccionado(DocumentosClienteDTO documentosClienteDTOSeleccionado) {
        this.documentosClienteDTOSeleccionado = documentosClienteDTOSeleccionado;
    }

    public UploadedFile getFileDocumentoCotizacionAutomatica() {
        return fileDocumentoCotizacionAutomatica;
    }

    public void setFileDocumentoCotizacionAutomatica(UploadedFile fileDocumentoCotizacionAutomatica) {
        this.fileDocumentoCotizacionAutomatica = fileDocumentoCotizacionAutomatica;
    }

    public String getConsultarDocumentoClienteDescripcion() {
        return consultarDocumentoClienteDescripcion;
    }

    public void setConsultarDocumentoClienteDescripcion(String consultarDocumentoClienteDescripcion) {
        this.consultarDocumentoClienteDescripcion = consultarDocumentoClienteDescripcion;
    }

    public Proyecto getProyectoSeleccionado() {
        return proyectoSeleccionado;
    }

    public void setProyectoSeleccionado(Proyecto proyectoSeleccionado) {
        this.proyectoSeleccionado = proyectoSeleccionado;
    }

    public Proyecto getProyectoSeleccionadoConsulta() {
        return proyectoSeleccionadoConsulta;
    }

    public void setProyectoSeleccionadoConsulta(Proyecto proyectoSeleccionadoConsulta) {
        this.proyectoSeleccionadoConsulta = proyectoSeleccionadoConsulta;
    }
    
    public List<ClaveValorDTO> getListaClaveValorProyectoPlanInversionDTO() {
        return listaClaveValorProyectoPlanInversionDTO;
    }

    public void setListaClaveValorProyectoPlanInversionDTO(List<ClaveValorDTO> listaClaveValorProyectoPlanInversionDTO) {
        this.listaClaveValorProyectoPlanInversionDTO = listaClaveValorProyectoPlanInversionDTO;
    }

    public List<Proyecto> getListaProyectosCliente() {
        return listaProyectosCliente;
    }

    public void setListaProyectosCliente(List<Proyecto> listaProyectosCliente) {
        this.listaProyectosCliente = listaProyectosCliente;
    }

    public List<ClaveValorDTO> getListaClaveValorMonedaDTO() {
        return listaClaveValorMonedaDTO;
    }

    public void setListaClaveValorMonedaDTO(List<ClaveValorDTO> listaClaveValorMonedaDTO) {
        this.listaClaveValorMonedaDTO = listaClaveValorMonedaDTO;
    }
}
