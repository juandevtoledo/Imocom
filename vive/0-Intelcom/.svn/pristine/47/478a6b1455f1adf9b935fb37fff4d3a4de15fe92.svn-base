/*
 * Copyright (c) 2014 IMOCOM. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of IMOCOM.
 * ("Confidential Information").
 * It may not be copied or reproduced in any manner without the express
 * written permission of IMOCOM.
 */

package com.imocom.intelcom.services.ejb3;

import com.imocom.intelcom.persistence.entities.Rol;
import com.imocom.intelcom.persistence.util.PersistenceException;
import com.imocom.intelcom.services.AbstractService;
import com.imocom.intelcom.services.interfaces.IRolesServiceLocal;
import com.imocom.intelcom.services.util.ServiceException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ejb.Stateless;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * <strong>Aplicaci√≥n</strong>     : IMOCOM Sistema de Inteligencia Comercial.
 * <br/>
 * <br/>
 * <strong>Date</strong>           : Oct 11, 2014
 * <br/><br/>
 * <strong>Target</strong>         : 
 *
 * @author Carlos Guzman (cguzman) - PointMind S.A.S. - carlos.guzman@pointmind.com
 *
 */
@Stateless
public class RolesServiceBean extends AbstractService<Long, Rol> implements IRolesServiceLocal {
    
    private static final Logger logger = Logger.getLogger(RolesServiceBean.class);

    /**
     * 
     */
    public RolesServiceBean() {
        super(Rol.class);
    }

    /**
     * 
     * @param uniqueName
     * @return
     * @throws ServiceException 
     */
    public Rol findByUniqueName(String uniqueName) throws ServiceException {
        
        try {
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("rolNombre", uniqueName);
            
            return findEntitySingleResult("Rol.findByRolNombre", param);
        } catch (PersistenceException ex) {
           logger.error(ex.getMessage());
           throw new ServiceException(ex, Level.ERROR);
        }
    }

    /**
     * 
     * @return
     * @throws ServiceException 
     */
    public List listaDeUsuariosRolUno() throws ServiceException {
        
        try {
            
            return em.createNativeQuery("select distinct u.usuario, u.NOMBRE from usuario u inner join rol_usuario rus on u.ID_USUARIO = rus.ID_USUARIO where rus.ID_ROL = 1 order by u.usuario").getResultList();
            
        } catch (Exception e) {
            
           logger.error( e );
           throw new ServiceException(e, Level.ERROR);
           
        }
    }

}
