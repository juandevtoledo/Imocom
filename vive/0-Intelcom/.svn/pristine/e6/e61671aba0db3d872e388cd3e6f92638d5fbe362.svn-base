/*
 * Copyright (c) 2014 IMOCOM. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of IMOCOM.
 * ("Confidential Information").
 * It may not be copied or reproduced in any manner without the express
 * written permission of IMOCOM.
 */
package com.imocom.intelcom.view.beans;

import com.imocom.intelcom.persistence.entities.ServiciosEbs;
import com.imocom.intelcom.persistence.entities.Tipo;
import com.imocom.intelcom.services.interfaces.IServiciosEBSLocal;
import com.imocom.intelcom.services.interfaces.ITipoServiceLocal;
import com.imocom.intelcom.services.util.ServiceException;
import com.imocom.intelcom.util.exceptions.UtilException;
import static com.imocom.intelcom.util.utility.Constants.CLIENT_ID_PARAM;
import static com.imocom.intelcom.util.utility.Constants.DETALLE_CLIENTE_ID_PARAM;
import static com.imocom.intelcom.util.utility.Constants.SPECIFIC_CLIENT_CONSULTADO_ID_PARAM;
import static com.imocom.intelcom.util.utility.Constants.TIPO_PAIS;
import static com.imocom.intelcom.util.utility.Constants.WS_CLIENTES_ASESORES;
import static com.imocom.intelcom.util.utility.Constants.WS_CLIENTES_CONTACTOS_CONSULTA;
import static com.imocom.intelcom.util.utility.Constants.WS_CLIENTES_NOTAS;
import static com.imocom.intelcom.util.utility.Constants.WS_CLIENTE_DETALLE;
import static com.imocom.intelcom.util.utility.Constants.WS_PRODUCTOS_FACTURAR;
import static com.imocom.intelcom.util.utility.Constants.WS_PRODUCTOS_VENDIDOS;
import com.imocom.intelcom.util.utility.DateUtil;
import com.imocom.intelcom.util.utility.Utils;
import com.imocom.intelcom.view.AbstractFacesBean;
import com.imocom.intelcom.view.vo.ContactoCliente;
import com.imocom.intelcom.view.vo.DetalleCliente;
import com.imocom.intelcom.ws.ebs.vo.entities.ClienteVO;
import com.imocom.intelcom.ws.ebs.vo.entities.ContactoVO;
import com.imocom.intelcom.ws.ebs.vo.entities.NotaVO;
import com.imocom.intelcom.ws.ebs.vo.entities.ProductoVO;
import com.imocom.intelcom.ws.ebs.vo.response.ClienteResponseVO;
import com.imocom.intelcom.ws.ebs.vo.response.NotasResponseVO;
import com.imocom.intelcom.ws.ebs.vo.response.ProductosResponseVO;
import com.imocom.intelcom.ws.exception.IntelcomMiddlewareException;
import com.imocom.intelcom.ws.interfaces.jaxws.MiddlewareServiceRequestVO;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;
import org.apache.log4j.Logger;

/**
 *
 * @author rc
 */
@ManagedBean
@ViewScoped

public class ClientesDetalleFacesBean extends AbstractFacesBean implements Serializable {

    private static final Logger logger = Logger.getLogger(ClientesDetalleFacesBean.class);
    private static final long serialVersionUID = 1L;
    private ClienteVO clienteSeleccionado;

    private MiddlewareServiceRequestVO request;
    private int numeroParametrosWS = 0;

    private DetalleCliente detalleCliente;
    private String nombrePais;

    @EJB
    private IServiciosEBSLocal iServiciosESB;
    
    @EJB
    private ITipoServiceLocal iTipoService;
    

    private MiddlewareServiceRequestVO requestNotasXClientes;
    private int numeroParametrosWSNotasXClientes = 0;

    private MiddlewareServiceRequestVO requestAsesoresXClientes;
    private int numeroParametrosWSAsesoresXClientes = 0;
    
    private MiddlewareServiceRequestVO requestProductoVendidos;
    private int numeroParametrosProductoVendidos = 0;

    //private MiddlewareServiceRequestVO requestProductoVendidos;
    //private int numeroParametrosProductoVendidos = 0;

    private MiddlewareServiceRequestVO requestProductoVendidosXfacturar;
    private int numeroParametrosProductoVendidosXfacturar = 0;

    private List<ProductoVO> listadoventas;
    private List<ProductoVO> listadoventasXfacturar;
    
    private MiddlewareServiceRequestVO requestCliente;
     private int numeroParametrosWS_Cliente = 0;

    @Override
    protected void build() {
        listadoventas = new ArrayList<ProductoVO>();
        listadoventasXfacturar = new ArrayList<ProductoVO>();
        clienteSeleccionado = (ClienteVO) getSessionMap().get(CLIENT_ID_PARAM);
        logger.info("El cliente seleccionado es --> " + ((clienteSeleccionado != null) ? clienteSeleccionado.getNombreCliente() : "No seleccioando"));
        
        //Se verifica si viene de la página de actualización para no cargar nuevamente los datos
        boolean existeDetalleCliente = getRequest().getParameter(SPECIFIC_CLIENT_CONSULTADO_ID_PARAM) != null;

        if (existeDetalleCliente) {
            logger.info("Existe detalle cliente");            
            detalleCliente = (DetalleCliente)getSessionMap().get(DETALLE_CLIENTE_ID_PARAM);
            //numeroParametrosWS_Cliente = 1;
             armarRequestWS();
        } else {
            logger.info("No Existe detalle cliente");
            detalleCliente = new DetalleCliente(clienteSeleccionado);
            armarRequestWS();
            cargarContactos();
            cargarNotasXClientes();
            cargarListaAsesores();
            cargarProductosVendidos();
            cargarProductosVendidosXFacturar();
            //cargamos el detalle del cliente para evitar nuevoas consultas en la pagina de actualización
             getSessionMap().remove(DETALLE_CLIENTE_ID_PARAM);
            getSessionMap().put(DETALLE_CLIENTE_ID_PARAM, detalleCliente);
        }
         logger.info("El cliente seleccionado es con nit: "+ detalleCliente.getNit());
        ClienteVO _clienteConsultado=  consultaNombreCliente(detalleCliente.getNit());
        detalleCliente.setTelefonoContacto(_clienteConsultado.getTelefonoContanctoPpal());
         detalleCliente.setTelefono(_clienteConsultado.getTelefonoPpal());
        try {
            Tipo tipoPais = iTipoService.findByTipoNombreValor(TIPO_PAIS, detalleCliente.getPais());
            nombrePais = tipoPais.getTipoEtiqueta();
        } catch (ServiceException ex) {
            logger.error("Error consultando tipo País "+ex.getMessage());
        }
    }

    private void armarRequestWS() {
        try {
            request = new MiddlewareServiceRequestVO();
            ServiciosEbs servicio = iServiciosESB.findByUniqueName(WS_CLIENTES_CONTACTOS_CONSULTA);
            request.setEndpoint(servicio.getInterfazEndpoint());
            request.setMethod(servicio.getMetodo());
            request.setNamespacePort(servicio.getNamespace());
            request.setServiceName(servicio.getQnameServicio());
            request.setWsdlUrl(servicio.getUrlWsdl());
            request.setInterfaceType(servicio.getTipoInterfaz());
            //Cargamos el número de parametros
            numeroParametrosWS = servicio.getNumeroParametros();

            //Cargamos configuración de las notas x clientes
            requestNotasXClientes = new MiddlewareServiceRequestVO();
            ServiciosEbs servicionxc = iServiciosESB.findByUniqueName(WS_CLIENTES_NOTAS);
            requestNotasXClientes.setEndpoint(servicionxc.getInterfazEndpoint());
            requestNotasXClientes.setMethod(servicionxc.getMetodo());
            requestNotasXClientes.setNamespacePort(servicionxc.getNamespace());
            requestNotasXClientes.setServiceName(servicionxc.getQnameServicio());
            requestNotasXClientes.setWsdlUrl(servicionxc.getUrlWsdl());
            requestNotasXClientes.setInterfaceType(servicionxc.getTipoInterfaz());
            //Cargamos el número de parametros
            numeroParametrosWSNotasXClientes = servicionxc.getNumeroParametros();

            //Cargamos configuración de los asesores x cliente
            requestAsesoresXClientes = new MiddlewareServiceRequestVO();
            ServiciosEbs servicionac = iServiciosESB.findByUniqueName(WS_CLIENTES_ASESORES);
            requestAsesoresXClientes.setEndpoint(servicionac.getInterfazEndpoint());
            requestAsesoresXClientes.setMethod(servicionac.getMetodo());
            requestAsesoresXClientes.setNamespacePort(servicionac.getNamespace());
            requestAsesoresXClientes.setServiceName(servicionac.getQnameServicio());
            requestAsesoresXClientes.setWsdlUrl(servicionac.getUrlWsdl());
            requestAsesoresXClientes.setInterfaceType(servicionac.getTipoInterfaz());
            //Cargamos el número de parametros
            numeroParametrosWSAsesoresXClientes = servicionac.getNumeroParametros();
            
            requestProductoVendidos = new MiddlewareServiceRequestVO();
            ServiciosEbs servicioPrVendidos = iServiciosESB.findByUniqueName(WS_PRODUCTOS_VENDIDOS);
            requestProductoVendidos.setEndpoint(servicioPrVendidos.getInterfazEndpoint());
            requestProductoVendidos.setMethod(servicioPrVendidos.getMetodo());
            requestProductoVendidos.setNamespacePort(servicioPrVendidos.getNamespace());
            requestProductoVendidos.setServiceName(servicioPrVendidos.getQnameServicio());
            requestProductoVendidos.setWsdlUrl(servicioPrVendidos.getUrlWsdl());
            requestProductoVendidos.setInterfaceType(servicioPrVendidos.getTipoInterfaz());
            //Cargamos el número de parametros
            numeroParametrosProductoVendidos = servicioPrVendidos.getNumeroParametros();

            requestProductoVendidosXfacturar = new MiddlewareServiceRequestVO();
            ServiciosEbs servicioPrVendidosxFacturar = iServiciosESB.findByUniqueName(WS_PRODUCTOS_FACTURAR);
            requestProductoVendidosXfacturar.setEndpoint(servicioPrVendidosxFacturar.getInterfazEndpoint());
            requestProductoVendidosXfacturar.setMethod(servicioPrVendidosxFacturar.getMetodo());
            requestProductoVendidosXfacturar.setNamespacePort(servicioPrVendidosxFacturar.getNamespace());
            requestProductoVendidosXfacturar.setServiceName(servicioPrVendidosxFacturar.getQnameServicio());
            requestProductoVendidosXfacturar.setWsdlUrl(servicioPrVendidosxFacturar.getUrlWsdl());
            requestProductoVendidosXfacturar.setInterfaceType(servicioPrVendidosxFacturar.getTipoInterfaz());
            //Cargamos el número de parametros
            numeroParametrosProductoVendidosXfacturar = servicioPrVendidosxFacturar.getNumeroParametros();
            //Detalle del Cliente
            requestCliente = new MiddlewareServiceRequestVO();
            ServiciosEbs servicioDetalle = iServiciosESB.findByUniqueName(WS_CLIENTE_DETALLE);
            requestCliente.setEndpoint(servicioDetalle.getInterfazEndpoint());
            requestCliente.setMethod(servicioDetalle.getMetodo());
            requestCliente.setNamespacePort(servicioDetalle.getNamespace());
            requestCliente.setServiceName(servicioDetalle.getQnameServicio());
            requestCliente.setWsdlUrl(servicioDetalle.getUrlWsdl());
            //Cargamos el nÃºmero de parametros
            logger.info("numeroParametrosWS_Cliente en ClientesDetalleFacesBean: " + servicioDetalle.getNumeroParametros());
            numeroParametrosWS_Cliente = servicioDetalle.getNumeroParametros();
            

        } catch (ServiceException ex) {
            logger.error(ex.getMessage());
        }

    }
    //Consulta detalle de Cliente
    private ClienteVO  consultaNombreCliente(String idCliente) {
        logger.info("Nùmero de paràmetros: " + numeroParametrosWS_Cliente);
        logger.info("Nùmero de paràmetros: " + numeroParametrosWS_Cliente);
        
        String[] paramsService = new String[numeroParametrosWS_Cliente];
        paramsService[0] = idCliente;

        requestCliente.setParams(paramsService);
        try {
            String responseStr = userSession.getClientWs().consumeService(requestCliente);
            ClienteResponseVO response = (ClienteResponseVO) Utils.unmarshal(ClienteResponseVO.class, responseStr);
            if (response != null && response.getClientes() != null) {
                logger.info("responseStr: " + responseStr);
               return response.getClientes().get(0);
            }
            
            
        } catch (IntelcomMiddlewareException ex) {
            logger.error(ex.getMessage());
        } catch (UtilException ex) {
             logger.error(ex.getMessage());
        }

        return null;

    }


    /**
     * Método que retorna la lista de asesores que visitaron a un asesor
     */
    private void cargarListaAsesores() {

        String[] paramsService = new String[numeroParametrosWSAsesoresXClientes];
        paramsService[0] = clienteSeleccionado.getNitCliente();

        requestAsesoresXClientes.setParams(paramsService);

        String responseStr;
        if (requestAsesoresXClientes != null) {

            try {
                responseStr = userSession.getClientWs().consumeService(requestAsesoresXClientes);
                NotasResponseVO response = (NotasResponseVO) Utils.unmarshal(NotasResponseVO.class, responseStr);
                List<NotaVO> asesores = new ArrayList<NotaVO>();
                if (response != null && response.getNotas() != null) {
                    for (NotaVO nt : response.getNotas()) {
                        DateUtil.getStringBMPToDate(nt.getFechaCreacion());
                        nt.setFechaCreacion(DateUtil.formatShortDateTime(DateUtil.getStringBMPToDate(nt.getFechaCreacion())));
                        asesores.add(nt);
                    }

                }
                detalleCliente.setListaAsesores(asesores);
            } catch (IntelcomMiddlewareException ex) {
                logger.error(ex.getMessage());
            } catch (UtilException ex) {
                logger.error(ex.getMessage());
            }

        }

    }

    private void cargarContactos() {
        try {

            String[] paramsService = new String[numeroParametrosWS];
            paramsService[0] = clienteSeleccionado.getNitCliente();

            request.setParams(paramsService);

            String responseStr;
            if (request != null) {
                responseStr = userSession.getClientWs().consumeService(request);
                ClienteResponseVO response = (ClienteResponseVO) Utils.unmarshal(ClienteResponseVO.class, responseStr);

                List<ContactoCliente> contactos = new ArrayList<ContactoCliente>();
                if (response != null) {
                    List<ContactoVO> contactosResponse = response.getContactos();
                    if (contactosResponse != null && !contactosResponse.isEmpty()) {

                        for (ContactoVO contactoItem : contactosResponse) {
                            contactos.add(new ContactoCliente(contactoItem));
                        }

                    }
                }
                detalleCliente.setListaContactos(contactos);
            }
        } catch (IntelcomMiddlewareException ex) {
            logger.error(ex.getMessage());
        } catch (UtilException ex) {
            logger.error(ex.getMessage());
        }

    }

    private void cargarNotasXClientes() {
        try {
            //armarRequestWS();
            String[] paramsService = new String[numeroParametrosWSNotasXClientes];
            paramsService[0] = clienteSeleccionado.getNitCliente();
            paramsService[1] = userSession.getUserLogin();

            requestNotasXClientes.setParams(paramsService);

            String responseStr;
            if (requestNotasXClientes != null) {
                responseStr = userSession.getClientWs().consumeService(requestNotasXClientes);
                NotasResponseVO response = (NotasResponseVO) Utils.unmarshal(NotasResponseVO.class, responseStr);

                List<NotaVO> notas = new ArrayList<NotaVO>();
                if (response != null && response.getNotas() != null) {

                    for (NotaVO nt : response.getNotas()) {
                        // DateUtil.getStringBMPToDate(nt.getFechaCreacion());
                        nt.setFechaCreacion(DateUtil.formatShortDateTime(DateUtil.getStringBMPToDate(nt.getFechaCreacion())));
                        notas.add(nt);
                    }
                }
                detalleCliente.setListaNotas(notas);
            }
        } catch (IntelcomMiddlewareException ex) {
            logger.error(ex.getMessage());
        } catch (UtilException ex) {
            logger.error(ex.getMessage());
        }
    }
    
    private void cargarProductosVendidos() {
        try {
            //armarRequestWS();
            this.listadoventas = new ArrayList<ProductoVO>();
            String[] paramsService = new String[numeroParametrosProductoVendidos];
            paramsService[0] = clienteSeleccionado.getNitCliente();

            requestProductoVendidos.setParams(paramsService);

            String responseStr;
            if (requestProductoVendidos != null) {
                responseStr = userSession.getClientWs().consumeService(requestProductoVendidos);
                ProductosResponseVO response = (ProductosResponseVO) Utils.unmarshal(ProductosResponseVO.class, responseStr);

                if (response != null && response.getProductos() != null) {
                    for (ProductoVO pr : response.getProductos()) {
                        pr.setFecha(DateUtil.formatShortDate(DateUtil.getStringBMPToDate(pr.getFecha())));
                        this.listadoventas.add(pr);
                    }

                }
            }
        } catch (IntelcomMiddlewareException ex) {
            logger.error(ex.getMessage());
        } catch (UtilException ex) {
            logger.error(ex.getMessage());
        }
    }

    private void cargarProductosVendidosXFacturar() {
        try {
            // armarRequestWS();
            String[] paramsService = new String[numeroParametrosProductoVendidosXfacturar];
            paramsService[0] = clienteSeleccionado.getNitCliente();

            requestProductoVendidosXfacturar.setParams(paramsService);

            String responseStr;
            if (requestProductoVendidosXfacturar != null) {
                responseStr = userSession.getClientWs().consumeService(requestProductoVendidosXfacturar);
                ProductosResponseVO response = (ProductosResponseVO) Utils.unmarshal(ProductosResponseVO.class, responseStr);

                if (response != null && response.getProductos() != null) {

                    for (ProductoVO pr : response.getProductos()) {
                        pr.setFecha(DateUtil.formatShortDate(DateUtil.getStringBMPToDate(pr.getFecha())));
                        this.listadoventasXfacturar.add(pr);
                    }
                }
            }
        } catch (IntelcomMiddlewareException ex) {
            logger.error("Error cargando requestProductoVendidosXfacturar"+ex.getMessage());
        } catch (UtilException ex) {
            logger.error("Error cargando requestProductoVendidosXfacturar"+ex.getMessage());
        }catch (java.lang.NullPointerException ex) {
            logger.error("Error cargando requestProductoVendidosXfacturar"+ex.getMessage());
        }catch (Exception ex) {
            logger.error("Error cargando requestProductoVendidosXfacturar"+ex.getMessage());
        }
    }

    public void eventosAction(ActionEvent actionEvent) {

    }

    public void oportunidadesAction(ActionEvent actionEvent) {

    }

    public void carteraAction(ActionEvent actionEvent) {

    }

    public DetalleCliente getDetalleCliente() {
        return detalleCliente;
    }

    public void setDetalleCliente(DetalleCliente detalleCliente) {
        this.detalleCliente = detalleCliente;
    }

    public List<ProductoVO> getListadoventas() {
        return listadoventas;
    }

    public void setListadoventas(List<ProductoVO> listadoventas) {
        this.listadoventas = listadoventas;
    }

    public List<ProductoVO> getListadoventasXfacturar() {
        return listadoventasXfacturar;
    }

    public void setListadoventasXfacturar(List<ProductoVO> listadoventasXfacturar) {
        this.listadoventasXfacturar = listadoventasXfacturar;
    }

    public String getNombrePais() {
        return nombrePais;
    }
    
    

}
