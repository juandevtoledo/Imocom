/*
 * Copyright (c) 2014 IMOCOM. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of IMOCOM.
 * ("Confidential Information").
 * It may not be copied or reproduced in any manner without the express
 * written permission of IMOCOM.
 */
package com.imocom.intelcom.view.beans;

import com.imocom.intelcom.persistence.entities.Lead;
import com.imocom.intelcom.persistence.entities.RolUsuario;
import com.imocom.intelcom.persistence.entities.ServiciosEbs;
import com.imocom.intelcom.persistence.entities.Tipo;
import com.imocom.intelcom.services.interfaces.ILeadServiceLocal;
import com.imocom.intelcom.services.interfaces.IRolesServiceLocal;
import com.imocom.intelcom.services.interfaces.IServiciosEBSLocal;
import com.imocom.intelcom.services.interfaces.ITipoServiceLocal;
import com.imocom.intelcom.util.utility.Constants;
import static com.imocom.intelcom.util.utility.Constants.WS_CLIENTE_DETALLE;
import com.imocom.intelcom.util.utility.Utils;
import com.imocom.intelcom.view.AbstractFacesBean;
import com.imocom.intelcom.view.vo.ClaveValorDTO;
import com.imocom.intelcom.ws.ebs.vo.response.ClienteResponseVO;
import com.imocom.intelcom.ws.interfaces.jaxws.MiddlewareServiceRequestVO;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;
import org.apache.log4j.Logger;

/**
 *
 * @author Rafael Guillermo Blanco Banquez <rafaelg.blancob@gmail.com>
 */
@ManagedBean
@ViewScoped
public class LeadConsultaFacesBean  extends AbstractFacesBean implements Serializable {

    private static final Logger logger = Logger.getLogger(LeadConsultaFacesBean.class);
    private static final long serialVersionUID = 1L;

    
    @EJB
    private ILeadServiceLocal iLeadServiceLocal;
    
    private List<Lead> listaLead;
    private Lead leadBusqueda;
    private Lead leadSeleccionado;
    private String observacion;
    private String asesor;
    
    private boolean esPerfilAsesor = false;
    private boolean esPerfilMercadeo = false;
    
    private List<ClaveValorDTO> listaAsesorDTO;
    private List<ClaveValorDTO> listaCanalDTO;
    
    @EJB
    private ITipoServiceLocal iTipoService;
    
    @EJB
    private IRolesServiceLocal iRolesServiceLocal;
    
    @EJB
    private IServiciosEBSLocal iServiciosESB;
    
    
    @Override
    protected void build() {
        
        try {
            
            listaLead = new ArrayList<Lead>();
            leadBusqueda = new Lead();
            
            listaAsesorDTO = new ArrayList<ClaveValorDTO>();
            
            Set<String> rolUsers =  userSession.getUserSessionRoles();
            
            for(String rol : rolUsers){
                if( "asesor".equalsIgnoreCase( rol ) ){
                    esPerfilAsesor = true;
                    listaAsesorDTO.add( new ClaveValorDTO( userSession.getUserLogin(), userSession.getUserLogin()));
                }
                if( "mercadeo".equalsIgnoreCase( rol ) ){
                    esPerfilMercadeo = true;
                }
            } 
            
            if( esPerfilMercadeo ){
                
                listaAsesorDTO = new ArrayList<ClaveValorDTO>();
                
                List<RolUsuario> lista = iRolesServiceLocal.listaDeUsuariosRolUno();
                for (RolUsuario tipo : lista) {
                    listaAsesorDTO.add( new ClaveValorDTO(  tipo.getUsuario().getUsuario() , tipo.getUsuario().getUsuario().concat(" - ").concat( tipo.getUsuario().getNombre() )  ));
                }
            }
            
            List<Tipo> lista = iTipoService.findByTipoNombre( Constants.TIPO_LEAD_CANAL );            
            listaCanalDTO = new ArrayList<ClaveValorDTO>();           
            for (Tipo tipo : lista) {
                listaCanalDTO.add( new ClaveValorDTO( tipo.getTipoValor(), tipo.getTipoEtiqueta()));
            }
            
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
    }
    
    private MiddlewareServiceRequestVO requestCliente;
    private int numeroParametrosWS_Cliente = 0;


    /**
     * 
     * @return 
     */
    public String crearOportunidad() {
        try {
            
            //Detalle del Cliente
            requestCliente = new MiddlewareServiceRequestVO();
            ServiciosEbs servicioDetalle = iServiciosESB.findByUniqueName(Constants.WS_LEAD_ASIGNACIONCANALES);
            requestCliente.setEndpoint(servicioDetalle.getInterfazEndpoint());
            requestCliente.setMethod(servicioDetalle.getMetodo());
            requestCliente.setNamespacePort(servicioDetalle.getNamespace());
            requestCliente.setServiceName(servicioDetalle.getQnameServicio());
            requestCliente.setWsdlUrl(servicioDetalle.getUrlWsdl());
            numeroParametrosWS_Cliente = servicioDetalle.getNumeroParametros();
            
            String[] paramsService = new String[numeroParametrosWS_Cliente];
            paramsService[0] = leadSeleccionado.getNit().trim();
            
            requestCliente.setParams(paramsService);
            /*String responseStr = userSession.getClientWs().consumeService(requestCliente);
            ClienteResponseVO response = (ClienteResponseVO) Utils.unmarshal(ClienteResponseVO.class, responseStr);
            logger.info("responseStr: " + responseStr);
            if (response == null || response.getClientes() != null || response.getClientes().isEmpty() ) {               
               //CLIENTE NO EXISTE
               performErrorMessages("No es posiable crear la oportunidad debido a que el nit: "+leadSeleccionado.getNit().trim()+" no exíste. ");
               return null;
            }*/
            
            leadSeleccionado.setFechaUltimaActualizacion( new Date() );
            //leadSeleccionado.setEstado( Constants.LEAD_ESTADO_CREACION_OPORTUNIDAD );
            leadSeleccionado.setObservacionCancela("Se crea oportunidad");
            
            iLeadServiceLocal.update( leadSeleccionado );
            
            reiniciarDatos();
            
            buscarAction( null );
            
            performInfoMessages("La oportunidad a sido enviada para su creación");
            
        }catch(Exception e ){
            performErrorMessages("Error al crear la oportunidad lead");
            logger.error(e);
        }
        return null;
    }
    
    
    /**
     * Se reinicia tabla de listado de oportunidades
     */
    public void reiniciarDatos() {
        
        asesor = null;
        observacion = null;
        
    }
    
    public void cancelarAction(ActionEvent actionEvent) {
        try {
            
            leadSeleccionado.setFechaUltimaActualizacion( new Date() );
            leadSeleccionado.setFechaCancela(new Date() );
            leadSeleccionado.setEstado( Constants.LEAD_ESTADO_CANCELADO );
            leadSeleccionado.setObservacionCancela(observacion);
            leadSeleccionado.setUsuarioCancela( userSession.getUserLogin() );
            
            iLeadServiceLocal.update( leadSeleccionado );
            
            reiniciarDatos();
            
            String outcome = getViewRedirect(Constants.PAGE_LEAD_CONSULTAR_KEY);
            redirect(navigationFaces.navigation.get(outcome));
            
        }catch(Exception e ){
            performErrorMessages("Error al cancelar lead");
            logger.error(e);
        }
    }
    
    public String editarLead(){
        
        getSessionMap().remove("LEAD_SELECCIONADO_EDITAR");
        if( leadSeleccionado != null ){
            
            getSessionMap().put("LEAD_SELECCIONADO_EDITAR", leadSeleccionado);
            
            String outcome = getViewRedirect(Constants.PAGE_LEAD_EDITAR_KEY);
            return navigationFaces.navigation.get(outcome);
            
        }
        return null;
    }
    
    public void resignaAction(ActionEvent actionEvent) {
        try {
            
            leadSeleccionado.setFechaUltimaActualizacion( new Date() );
            leadSeleccionado.setFechaReasigna( new Date() );
            leadSeleccionado.setEstado( Constants.LEAD_ESTADO_NUEVO );
            leadSeleccionado.setObservacionReasigna( observacion);            
            String usuarioActual = leadSeleccionado.getAsesor();
            leadSeleccionado.setUsuarioAnterior( usuarioActual );
            leadSeleccionado.setAsesor( asesor );
            leadSeleccionado.setUsuarioReasigna( userSession.getUserLogin() );
            
            iLeadServiceLocal.update( leadSeleccionado );
            
            reiniciarDatos();
            
            String outcome = getViewRedirect(Constants.PAGE_LEAD_CONSULTAR_KEY);
            redirect(navigationFaces.navigation.get(outcome));
            
        }catch(Exception e ){
            performErrorMessages("Error al cancelar lead");
            logger.error(e);
        }
    }
    
    public void buscarAction(ActionEvent actionEvent) {
        
        try {
            
            listaLead = iLeadServiceLocal.findListByParm( leadBusqueda );
            
        } catch (Exception ex) {
            
            performErrorMessages("Error al consultar lead");
            logger.error(ex);
        }

    }

    public List<Lead> getListaLead() {
        return listaLead;
    }

    public void setListaLead(List<Lead> listaLead) {
        this.listaLead = listaLead;
    }

    public Lead getLeadBusqueda() {
        return leadBusqueda;
    }

    public void setLeadBusqueda(Lead leadBusqueda) {
        this.leadBusqueda = leadBusqueda;
    }

    public Lead getLeadSeleccionado() {
        return leadSeleccionado;
    }

    public void setLeadSeleccionado(Lead leadSeleccionado) {
        this.leadSeleccionado = leadSeleccionado;
    }

    public String getObservacion() {
        return observacion;
    }

    public void setObservacion(String observacion) {
        this.observacion = observacion;
    }

    public String getAsesor() {
        return asesor;
    }

    public void setAsesor(String asesor) {
        this.asesor = asesor;
    }    

    public List<ClaveValorDTO> getListaAsesorDTO() {
        return listaAsesorDTO;
    }

    public void setListaAsesorDTO(List<ClaveValorDTO> listaAsesorDTO) {
        this.listaAsesorDTO = listaAsesorDTO;
    }

    public List<ClaveValorDTO> getListaCanalDTO() {
        return listaCanalDTO;
    }

    public void setListaCanalDTO(List<ClaveValorDTO> listaCanalDTO) {
        this.listaCanalDTO = listaCanalDTO;
    }

    public boolean isEsPerfilAsesor() {
        return esPerfilAsesor;
    }

    public void setEsPerfilAsesor(boolean esPerfilAsesor) {
        this.esPerfilAsesor = esPerfilAsesor;
    }

    public boolean isEsPerfilMercadeo() {
        return esPerfilMercadeo;
    }

    public void setEsPerfilMercadeo(boolean esPerfilMercadeo) {
        this.esPerfilMercadeo = esPerfilMercadeo;
    }

    
}
